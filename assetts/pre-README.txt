هدف این پروژه سگمنت‌کردن استخوان فمور از تصاویر رادیولوژی بود. در ابتدا دیتای کافی برای استفاده از تکنیک‌های ماشین‌لرنینگ در دسترسمان نبود. بنابراین تلاش کردیم با همان چند نمونه تصویری که در اختیار داشتیم الگوریتمی طراحی کنیم تا لبه‌ی استخوان فمور را در سراسر محیط آن بیابد. بعدتر به یک منبع دیتا دسترسی پیدا کردیم و یک مدل یادگیری ماشین نیز آموزش دادیم.

تصویر 0



روش کلاسیک
در این روش، استخراج فمور طی سه مرحله انجام شد:
یافتن دایره
یافتن شفت فمور
یافتن گردن فمور و تروکانترها
ابتدا به کمک یک شبکه‌ی عصبی ناحیه‌ای که فمور در آن قرار دارد را از کل عکس کراپ کردیم. سپس ناحیه‌ای که سر فمور در آن قرار دارد را کراپ کردیم. برای این کار از مدل یونت استفاده شد. تعداد ۵۷۰ عکس برچسب زده‌شدند. 
مدل یونت مورد استفاده در این قسمت، تصاویر را از ابعاد اولیه‌شان به ابعاد 512*512 تغییر سایز می‌دهد. این تغییر سایز نسبت ابعاد تصویر را به هم می‌ریزد و این تغییر نسبت، تشخیص دایره را در فمور دشوارتر می‌کند. برای پرهیز از این دشواری، ابتدا ناحیه‌ای سیاه‌رنگ را به کناره‌های تصاویر اضافه کردیم تا مربعی شوند. بدین‌ترتیب از تغییر نسبتی که در طی فرایند ریسایزکردن اتفاق می‌افتاد مصون می‌ماندند و تشخیص دایره ساده‌تر می‌شد. خروجی این شبکه به شرح زیر بود.



تصویر ۱



با استفاده از تبدیل هاوف، دایره‌ی سر فمور را جدا کردیم پارامترهای تبدیل هاوف به شرح زیر بودند:
dp = 2
minDist = 5
param1 = 70
param2 = 35
مینیمم شعاع مد نظر برای جست‌وجوی دایره، برابر یک‌سوم تعداد ستون‌های ناحیه‌ی سر فمور، و ماکزیمم آن، برابر دو سوم تعداد ستون‌های این ناحیه در نظر گرفته‌شد.



تصویر ۲ 




در مرحله‌ی بعد برای استخراج نقاط تشکیل‌دهنده‌ی لبه‌ی شفت فمور اقدام کردیم. به نظر می‌رسید پیداکردن لبه‌ی سمت چپ با انتخاب نقطه‌ای از هر سطر که بیشترین اختلاف شدت روشنایی را با پیکسل سمت چپ خود داشته‌باشد، امکان‌پذیر باشد (به طور مشابهی برای پیداکردن لبه‌ي سمت راست، به نظر می‌رسید که نقطه‌ای با بیشترین اختلاف شدت روشنایی نسبت به پیکسل سمت راست خود، نقطه‌ی مناسبی باشد). اما مشکلی وجود داشت و آن این بود که در بعضی سطرها، این الگوریتم نقاط نامطلوبی را به دست می‌داد. برای حل این مشکل، جهت تعیین لبه‌ی سمت چپ شفت، در هر سطرِ مضرب ده تصویر، ۴ پیکسل را که از حیث اختلاف شدت روشنایی با پیکسل مجاور در سمت چپ بیشترین مقدار مثبت را داشتند (از پیکسل‌ سمت چپشان روشن‌تر بودند) در مرحله‌ی اول انتخاب شدند. برای تعیین لبه‌ی سمت راست، به طور مشابهی، در هر سطرِ مضرب ده تصویر، ۴ پیکسل را که از حیث اختلاف شدت روشنایی با پیکسل مجاور در سمت چپ بیشترین مقدار منفی را داشتند (از پیکسل‌ سمت چپشان تاریک‌تر بودند) برگزیده‌شدند.


تصویر ۳


برای انتخاب بهترین نقطه در هر سطر، یک تابع خطا تعریف کردیم:
مزبور فرمول تابع خطا
ابتدا برای هرکدام از چهار نقطه‌ی سطر اول، مجموع مقادیر این تابع خطا را به‌‌ازای تک‌تک نقاط موجود در سطرهای دیگر محاسبه کردیم. نقطه‌ای در سطر اول که این مقدار محاسبه‌شده برای آن، کمترین بود، به عنوان لبه‌ی شفت در نخستین سطر تصویر انتخاب شد. سپس در هرکدام از سطرهای دیگر، مقدار تابع خطای هرکدام از ۴ نقطه را با نقطه‌ی انتخاب‌شده در سطر پیش از خود محاسبه کردیم و نقطه‌ای که مقدار تابع خطای آن مینیمم بود را برگزیدیم. بدین‌ترتیب نقاط مناسب انتخاب شدند.در بین نقاط پیداشده، همچنان نقاط نامطلوب به چشم می‌خوردند. 



تصویر ۴




برای حذف‌ آن‌ها، نقاط را به پنج دسته تقسیم کردیم و در هر دسته، نقطه‌ای که سطر و ستون آن برابر میانگین سطر و ستون‌های تمام نقاط آن دسته بود را مشخص کردیم. بهترین خط گذرنده از این نقاط میانگین را محاسبه کردیم. از آن‌جایی که تعداد نقاط پراکنده بسیار کمتر از نقاط مطلوب بود، این خط محاسبه‌شده هم با خطی که در نهایت بایست به دست می‌آمد اختلاف جزئی‌ای داشت. لذا از آن به عنوان مرجع مناسبی جهت حذف نقاط نامطلوب استفاده کردیم. بدین صورت که پیکسل‌هایی که فاصله‌ی افقیشان با این خط، از هشت‌برابر میانگین فاصله‌ی کل نقاط با این خط بیشتر بود را به عنوان نقاط نامطلوب، شناسایی و حذف کردیم. خروجی این مرحله در شکل 18 دیده می‌شود.
پیداکردن مابقی لبه‌ها با استفاده از الگوریتم کانتور فالوینگ انجام شد. پیش از توضیح ادامه‌ی کار، به شرح این الگوریتم می‌پردازیم.



کانتور فالوینگ:
هدف این الگوریتم آن است که با داشتن یک پیکسل که روی مرز دو ناحیه در تصویر قرار دارد، آن مرز را دنبال کند و سایر نقاطی که روی آن قرار دارند را به ترتیب انتخاب کند.
در لبه‌ی سمت راست فمور، با توجه به اینکه روشنایی پیکسل‌ها از زیاد به سمت کم می‌رود، انتظار داریم در حوالی نقطه‌ای که روی مرز استخوان قرار دارد (پیکسل سبزرنگ)، با چنین منظره‌ای مواجه شویم (تصویر به طور شماتیک رسم شده):





شکل 19. اولین مرحله‌ی الگوریتم کانتور فالوینگ

در سطر مجاور و بالایی پیکسل مورد نظر، روشنایی پیکسل‌ها از زیاد به کم تغییر می‌کند.
در الگوریتم کانتور فالوینگ، برای حرکت به سمت بالا در امتداد یک لبه‌ي عمودی (یا تقریباً عمودی)، یک نقطه که اطمینان داریم روی این لبه قرار دارد (پیکسلی که با رنگ سبز مشخص شده) را به عنوان شروع الگوریتم در نظر می‌گیریم. در سطر بالایی این نقطه، تعداد مشخصی از نقاط (مشخصاً 7 نقطه) را بررسی می‌کنیم. مجموعه‌ی این ۷ نقطه را «فیلتر» می‌نامیم. از بین آن‌ها، نقطه‌ای که بیشترین اختلاف روشنایی با پیکسل مجاور و سمت چپ خود دارد را به عنوان نقطه‌ی بعدی لبه انتخاب می‌کنیم. حالا این نقطه‌ی انتخاب‌شده را به عنوان شروع الگوریتم در نظر می‌گیریم و مرحله‌ی قبل را تکرار می‌کنیم. با ادامه‌دادن این الگوریتم، نقاط روی لبه انتخاب می‌شوند.
برای حرکت در جهت‌های دیگر، می‌توان فیلترهای متنوعی با جهت‌های مختلف در نظر گرفت:





جهت تکمیل لبه‌ی سمت راست و سمت چپ شفت، فیلتر صفردرجه به کار گرفته‌شد. در لبه‌ی بالای فمور، فیلتر عمودی به سمت راست اعمال شد. برای پیداکردن نقطه‌ی شروع الگوریتم در لبه‌ي بالایی، در مجاورت محدوده‌ی سر فمور، محدوده‌ی مستطیل‌شکلی را انتخاب کردیم. تعداد سطرهای آن به اندازه‌ی ۴۰ پیکسل کمتر از تعداد سطرهای محدوده‌ی سر فمور، و تعداد ستون‌های آن برابر ۲۰ پیکسل است. 







 در هر ستون این ناحیه، به ترتیب از چپ به راست، نقطه‌ای که بیشترین اختلاف روشنایی نسبت به پیکسل مجاور و پایین‌تر از خود دارد را انتخاب کردیم. بدین‌ترتیب در هر ستون این ناحیه، نقطه‌ای که اطمینان داریم روی مرز فمور قرار دارد را مشخص کرده‌ایم. این کار شبیه اقدامیست که در ابتدا برای پیداکردن شفت فمور قصد انجام آن را داشتیم. در آن مرحله این الگوریتم جواب نداد و باعث تولید نویزهای زیادی شد. در لبه‌ی بالای فمور اما، به دلیل اینکه ناحیه‌ی مورد بررسی کوچکتر بود و همچنین به این دلیل که ناحیه‌ی خلوت‌تری بود، با مشکل پیداشدن نقاط پراکنده مواجه نشدیم.
در اعمال کانتور فالوینگ روی لبه‌ی بالایی، آپدیتی به این الگوریتم اضافه کردیم. در این لبه، با توجه به اینکه مرز فمور مسیر ناهمواری را طی می‌کند، استفاده از یک فیلتر برای کل مسیر، چندان منطقی نیست. بنابراین در هر مرحله دو فیلتر صفردرجه و افقی به سمت راست شکل 20را اعمال کردیم و از بین آن‌ها، فیلتری که در آن اختلاف روشنایی شدیدتری به نظر می‌رسید را اعمال کردیم.
در الگوریتم کانتور فالوینگ یک گزینه برای انتخاب محل پایان کار این الگوریتم گنجانده شده‌است. در پیداکردن لبه‌ی سمت چپ، الگوریتم تا جایی ادامه پیدا می‌کند که سطر نقطه‌ی انتخاب‌شده، به ضلع پایینی ناحیه‌ی سر فمور برسد. پس از آن، یک بار دیگر کانتور فالوینگ اعمال می‌شود تا جایی که به محیط دایره‌ی سر فمور برسد. دلیل این تقسیم‌کردن آن است که بررسی دستیابی به محیط دایره، از نظر محاسباتی امر پرهزینه‌ایست، اما بررسی دستیابی به ضلع پایینی ناحیه‌ی سر فمور، به راحتی انجام می‌شود. لذا تا رسیدن به نزدیکی‌های محیط دایره (تا رسیدن به ضلع پایینی ناحیه‌ی سر فمور)، شرطی که بررسی آن آسان‌تر است را اتخاز کردیم و تعداد اندک نقاط باقی‌مانده را با شرط اصلی، ولی پیچیده‌تر، پیدا کردیم.
در پیداکردن لبه‌ی سمت راست فمور، الگوریتم تا رسیدن به سطری که به اندازه‌ی یک سوم تعداد سطرهای ناحیه‌ی سر فمور، بالاتر از ضلع پایینی ناحیه‌ی سر فمور است، ادامه پیدا می‌کند. در پیداکردن لبه‌ی بالایی، الگوریتم تا جایی ادامه پیدا می‌کند که به آخرین نقطه‌ی پیداشده در لبه‌ی سمت راست فمور برسد. خروجی این روش در قابل مشاهده است.







استخراج کانتور فمور با استفاده از شبکه عصبی:
برای این‌کار باز هم مدل U-net به کار گرفته‌شد. تعداد 583 تصویر برچسب زده‌شدند. ۹۰ درصد از این تعداد به مرحله‌ی آموزش و ۱۰ درصد به ارزیابی عملکرد شبکه اختصاص یافتند. برچسب‌زنی با استفاده از ابزار انتخاب سریع (quick selection) در نرم‌افزار فوتوشاپ انجام شد.
در مرحله‌ی برچسب‌زنی، استخوان‌های شکسته از دستور کار خارج شدند. دلیل این تصمیم آن بود که هدف از انجام این پروژه، اعمال تحلیل المان محدود و بررسی امکان شکسته‌شدن استخوان‌های سالم، جهت جایگزینی به موقع استخوانِ ضعیف با پروتز بود. لذا استخوان‌های شکسته در این پروژه موضوعیت پیدا نمی‌کردند.
برچسب‌ها با فرمت tiff و تصاویر با فرمت png به شبکه داده‌شدند. Batch Size برابر ۴ قرار داده‌شد. آموزش شبکه روی گوگل کولب و با به‌کارگیری پردازنده‌ی گرافیکی‌ای که گوگل در اختیار کاربران می‌گذارد انجام شد. پس از 100 ایپاک، دقت شبکه روی داده‌های تست به 99.73 درصد رسید. این دقت با معیار bce_dice_loss محاسبه‌شده که معیار استاندارد محاسبه‌ی دقت در segmentation است. خروجی شبکه یک ماسک است که با استفاده از دستور bitwise در کتابخانه‌ی openCv روی تصویر اصلی اعمال می‌شود و خروجی مد نظر را به دست می‌دهد.








شایان ذکر است در هر دو شیوه‌ای که برای استخراج کانتور به کار گرفته‌شد (روش کلاسیک و شبکه عصبی)، تنها کانتور فموری به دست آمد که در سمت راست تصویر دیده می‌شود (حسب وضعیت قرارگیری بیمار، این فمور می‌تواند مربوط به پای راست یا چپ باشد). برای دست‌یابی به کانتور فمورِ دیگر، به سادگی تصویر را قرینه می‌کنیم تا فمور چپ به شکل یک فمور راست ظاهر شود. پس از پردازش، کانتورِ استخراج‌شده را بار دیگر قرینه می‌کنیم تا بدین‌ترتیب کانتورِ فمور سمت چپ به شکل مورد انتظار به دست آید. دلیل این امر آن است که در شیوه‌ی کلاسیک، برای استخراج کانتور فمورِ سمت چپ، تمامی مراحل الگوریتم می‌بایست برای آن سمت قرینه‌سازی می‌شدند. هم‌چنین در استفاده از شبکه عصبی، برای استخراج کانتور فمور سمت چپ لازم بود تا تمامی تصاویر یک بار دیگر هم برچسب زده‌شوند. با یک قرینه‌‌کردنِ ساده، حجم محاسبات و تعداد برچسب‌های مورد نیاز را به نصف کاهش دادیم.